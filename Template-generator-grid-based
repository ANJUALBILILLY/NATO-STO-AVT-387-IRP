% -- VARIABLE TO BE STORED -------------------------------------
% 1-> 1D-BoundaryLayer_profile_1
% 2-> 1D-BoundaryLayer_profile_1_empty
% 3-> 1D-BoundaryLayer_profile_2
% 4-> 1D-BoundaryLayer_profile_2_empty
% 5-> 1D-density
% 6-> 1D-pressure coefficient


%--Describe variable---------------------------------------------
var=6;
%--File to be stored---------------------------------------------
if(var==1)
filename="Template-1D-BoundaryLayer_profile_1.dat";
elseif(var==2)
filename="Template-1D-BoundaryLayer_profile_1_empty.dat";
elseif(var==3)
filename="Template-1D-BoundaryLayer_profile_2.dat";
elseif(var==4)
filename="Template-1D-BoundaryLayer_profile_2_empty.dat";
elseif(var==5)
filename="Template-1D-Density.dat";
else
filename="Template-1D-PressureCoeff.FIXED.dat";
end
%--File parameters-----------------------------------------------
Datafilefine="cp.txt";    %Introduce the file name containing the flow data of finest grid
%Datafilemedium="medium.txt";  %Introduce the file name containing the flow data of medium grid
%Datafilecoarse="coarse.txt";  %Introduce the file name containing the flow data of coarse grid

% -- Participant details ----------------------------------------
name='"Anju Albi Lilly"';
lastname='Lilly';
initial='A';
email='"anju.albililly.425@cranfield.ac.uk"';
date='"9 July 2024"';

% -- SIMULATION PARAMETERS -------------------------------------
turb_model='SA-QCR';
auxturb_model='"SA-QCR"';
solver="Fluent";
solvername='"Fluent"';
ReynoldsNumber='"1.70 million/meter"';
FlowEqnOrder='"2"';
TurbEqnOrder='"2"';

% -- GRID PARAMETERS -------------------------------------------

%fine grid

RelIterConvLevel1='"1E-8"';
GridLevel1='"2"';
Levelname1='Level2';
GridCells1='"5743400"';

%medium grid

RelIterConvLevel2='"1E-8"';
GridLevel2='"2"';
Levelname2='Level2';
GridCells2='"5743400"';

%coarse grid

RelIterConvLevel3='"1E-8"';
GridLevel3='"2"';
Levelname3='Level2';
GridCells3='"5743400"';

%--Information---------------------------------------------------
Miscellaneous='"-999"';
GridId='"2023-12_FinalAsDesignedGrids"';
AUXDATA_ID='"D1"';
BasicAlgorithm='"Cell Center Finite Volume Method"';

%--Template (Do not modify)
writelines("#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", filename, WriteMode="append");
writelines("#", filename, WriteMode="append");
writelines("#   NATO AVT-387 CRWT 1D Data Template - EMPTY TUNNEL DATA SUBMITTAL FORM (Version 2 - 16 January 2024)", filename, WriteMode="append");
writelines("#", filename, WriteMode="append");
writelines("#       Due 3 MARCH 2024 to Chris Roy: cjroy@vt.edu", filename, WriteMode="append");
writelines("#", filename, WriteMode="append");
writelines("#	3D VT Stability Tunnel Empty Tunnel Simulations", filename, WriteMode="append");
writelines("#", filename, WriteMode="append");
writelines("#              TITLE:	First-author participant's last name & first initial + grid + turb model + solver + etc.", filename, WriteMode="append");
writelines("#                       EXAMPLES:  RoyC-2023-12_FinalAsDesignedGrids-SST-Fluent", filename, WriteMode="append");
writelines("#                                  RoyC-2023-12_FinalAsDesignedGrids-SST-SENSEI", filename, WriteMode="append");
writelines("#                                  RoyC-2023-12_FinalAsDesignedGrids-SA-neg-Fluent", filename, WriteMode="append");
writelines("#                                  RoyC-2023-12_FinalAsDesignedGrids-SA-neg-SENSEI", filename, WriteMode="append");
writelines("#                                  RoyC-UpdatedCommonCaseGrid-SST", filename, WriteMode="append");
writelines("#                                  RoyC-Overset_Grids-SST", filename, WriteMode="append");
writelines("#                                  RoyC-Dans Grids - Structured OVERFLOW-SST", filename, WriteMode="append");
writelines("#                                  RoyC-Nominal High Speed - Unstructured Grid-SST", filename, WriteMode="append");
writelines("#                                  etc.", filename, WriteMode="append");
writelines("#", filename, WriteMode="append");
writelines("#       NOMENCLATURE:", filename, WriteMode="append");
writelines("# 					x = streamwise location in tunnel in meters (x = 0 m is the beginning of the test section)", filename, WriteMode="append");
writelines("# 					y = vertical location in tunnel in meters (y = 0 m is halfway between the tunnel floor and tunnel ceiling)", filename, WriteMode="append");
writelines("# 					z = spanwise location in tunnel in meters (z = 0 m is halfway between the port and starboard walls)", filename, WriteMode="append");
if(var==1)     
writelines("# 					u/u<sub>ref</sub>  = velocity in x direction, u (m/s), normalized by reference velocity, u_ref (m/s), which",filename,WriteMode="append");
writelines("#                                         is determined from stagnation conditions, reference pressure, and isentropic relations;",filename,WriteMode="append");
writelines("#                                         Extract u just upstream of the reference location x = 3.502 m;",filename,WriteMode="append");
writelines("#                                         Start : x = 3.260m, y = 0 m,  z  = 0.9175m;     End : x = 3.260m, y = 0m, z =  0.412m",filename,WriteMode="append");
profile="Profile1";
variablesText='VARIABLES = "x (m)" "y (m)" "z (m)" "u/u<sub>ref</sub>"';
elseif(var==2)
writelines("# 					u/u<sub>ref</sub>  = velocity in x direction, u (m/s), normalized by reference velocity, u_ref (m/s), which", filename, WriteMode="append");
writelines("#                                         is determined from stagnation conditions, reference pressure, and isentropic relations;", filename, WriteMode="append");
writelines("#                                         Extract u just upstream of the reference location x = 3.502 m;", filename, WriteMode="append");
writelines("#                                         Start : x = 3.260m, y = 0 m,  z  = 0.9175m;     End : x = 3.260m, y = 0m, z =  0.412m", filename, WriteMode="append");
variablesText='VARIABLES = "x (m)" "y (m)" "z (m)" "u/u<sub>ref</sub>"';
profile="Profile1";
elseif(var==3)
writelines("# 					u/u<sub>ref</sub>  = velocity in x direction, u (m/s), normalized by reference velocity, u_ref (m/s), which", filename, WriteMode="append");
writelines("#                                         is determined from stagnation conditions, reference pressure, and isentropic relations;", filename, WriteMode="append");
writelines("#                                         Extract from the following location at x = 1.431 m;", filename, WriteMode="append");
writelines("#                                         Start : x = 1.431m, y = 0 m,  z  = 0.9175m;     End : x = 1.431m, y = 0m, z =  0.412m", filename, WriteMode="append");
variablesText='VARIABLES = "x (m)" "y (m)" "z (m)" "u/u<sub>ref</sub>"';
profile="Profile2";
elseif(var==4)
writelines("# 					u/u<sub>ref</sub>  = velocity in x direction, u (m/s), normalized by reference velocity, u_ref (m/s), which", filename, WriteMode="append");
writelines("#                                         is determined from stagnation conditions, reference pressure, and isentropic relations;", filename, WriteMode="append");
writelines("#                                         Extract from the following location at x = 1.431 m;", filename, WriteMode="append");
writelines("#                                         Start : x = 1.431m, y = 0 m,  z  = 0.9175m;     End : x = 1.431m, y = 0m, z =  0.412m", filename, WriteMode="append");
variablesText='VARIABLES = "x (m)" "y (m)" "z (m)" "u/u<sub>ref</sub>"';
profile="Profile2";
elseif(var==5)
writelines("# 					<greek>r</greek>/<greek>r</greek><sub>ref</sub>  = density (kg/m^3), normalized by reference density (kg/m^3", filename, WriteMode="append");
writelines("#                                         which is determined from stagnation conditions, reference pressure, and isentropic relations;", filename, WriteMode="append");
writelines("#                                         Extract along the tunnel centerline: Start: x = -9.419m , y = 0m , z = 0m and", filename, WriteMode="append");
writelines("#                                                                              End:   x = 7.3m ,y = 0m, z = 0m", filename, WriteMode="append");
variablesText='VARIABLES = "x (m)" "y (m)" "z (m)" "<greek>r</greek>/<greek>r</greek><sub>ref</sub>"';
else
writelines("# 					C<sub>p</sub>  = surface pressure coefficient (dimensionless) computed as:", filename, WriteMode="append");
writelines("#                                         Cp = (p - p_ref) / q_ref,  q_ref = 0.5*rho_ref*(V_ref)^2,  where rho_ref and V_ref are", filename, WriteMode="append");
writelines("#                                         determined from stagnation conditions, reference pressure, and isentropic relations;", filename, WriteMode="append");
writelines("#                                      Extract along the tunnel port wall: Start : x = -9.419m , y = 0m , z = 2.73m   to", filename, WriteMode="append");
writelines("#                                                                        End :  x = 15m , y = 0m , z = 0.9175m", filename, WriteMode="append");
writelines("#                                                                        (make sure to extract along the surface)", filename, WriteMode="append");
variablesText='VARIABLES = "x (m)" "y (m)" "z (m)" "C<sub>p</sub>"';
end
writelines("# 					N identifies the grid used, where N = number of cells or elements used in the simulation",filename,WriteMode="append");
writelines("#", filename, WriteMode="append");
writelines("#   BOUNDARY CONDITIONS & REFERENCE VALUES:", filename, WriteMode="append");
writelines("#   (Note: reference location is x = 3.502m, y = -0.608m, z = 0m)", filename, WriteMode="append");
writelines("# 					Re=1.70 million/meter, Mach=0.082, Stag. Temp=297.2 K, Stag. Press=94450 Pa, Reference Static Press=94009 Pa", filename, WriteMode="append");
writelines("# 					Re=2.80 million/meter, Mach=0.136, Stag. Temp=298.4 K, Stag. Press=94359 Pa, Reference Static Press=93147 Pa", filename, WriteMode="append");
writelines("# 					Re=3.90 million/meter, Mach=0.193, Stag. Temp=300.4 K, Stag. Press=94242 Pa, Reference Static Press=91832 Pa", filename, WriteMode="append");
writelines("#", filename, WriteMode="append");
writelines("#              NOTES: 1. All numerical data fields can be free-formatted.", filename, WriteMode="append");
writelines("#                     2. At least 3 grid levels should be included if possible, with each grid level being a separate zone.", filename, WriteMode="append");
writelines("#                     3. Give at least 7 significant digits for all quantities.", filename, WriteMode="append");
writelines("#                     4. The AUXDATA variable ID refers to the ID found in the participant Google Sheet spreadsheet found at:", filename, WriteMode="append");
writelines("#                          https://docs.google.com/spreadsheets/d/1Onqscotxnytdo4AQYC9RW3ZvTTPRoy2xi0YEKW1EG-k/edit?usp=sharing", filename, WriteMode="append");
writelines("#                     5. Fill fields with value of -999 for data that are not available.", filename, WriteMode="append");
writelines("#                     6. Only include one grid type, solver, turb model, etc per form.", filename, WriteMode="append")
writelines("#                     7. The AUXDATA variable RelIterConvLevel refers to the relative iterative convergence level for whichever", filename, WriteMode="append");
writelines("#                          governing equation had the smallest reduction, usually measured from the first few iterations to the final one", filename, WriteMode="append");
writelines("#                     8. Give exact total for N, the total number of cells/elements in the grid", filename, WriteMode="append");
writelines("#                     9. If you need to compute h, the scalar measure of the grid spacing, use the cube root of (1/N)", filename, WriteMode="append");
writelines("#                          For the 2023-12_FinalAsDesignedGrids, these h values are:", filename, WriteMode="append");
writelines("#                             Grid Name     #Cells, N        h", filename, WriteMode="append");
writelines("#                             Level 1:     637,505,024    0.0011619090", filename, WriteMode="append");
writelines("#                             Level 2:     318,932,768    0.0014636378", filename, WriteMode="append");
writelines("#                             Level 3:     159,564,180    0.00184369127", filename, WriteMode="append");
writelines("#                             Level 4:      79,688,128    0.00232381807", filename, WriteMode="append");
writelines("#                             Level 5:      39,690,000    0.00293161071", filename, WriteMode="append");
writelines("#                             Level 6:      19,929,502    0.00368837031", filename, WriteMode="append");
writelines("#                             Level 7:       9,961,016    0.00464763615", filename, WriteMode="append");
writelines("#                             Level 10:      1,245,127    0.00929527229", filename, WriteMode="append");
writelines("#", filename, WriteMode="append");
writelines("#                     10. Make sure to extract enough points to resolve your finest cells; suggestion:", filename, WriteMode="append");
writelines("#                             N_points_extracted = Length of line / delta-s_min    where delta-s_min is the height of the smallest cell", filename, WriteMode="append");
writelines("#", filename, WriteMode="append");
writelines("#++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++", filename, WriteMode="append");
writelines("",filename,WriteMode="append");
writelines("TITLE ='"+lastname+initial+'-2023-12_FinalAsDesignedGrids-'+turb_model+'-'+solver+"'",filename,WriteMode="append");
writelines(variablesText,filename,WriteMode="append");
%Fine Mesh
writelines("#-----------------------------------------------------------------------------------------", filename, WriteMode="append");
writelines("#   EACH ZONE REFERS TO A DIFFERENT GRID LEVEL, ORDERED FINEST (E.G., LEVEL 1) TO COARSEST", filename, WriteMode="append");
writelines("#-----------------------------------------------------------------------------------------", filename, WriteMode="append");
writelines("ZONE T = '"+lastname+initial+"-2023-12_FinalAsDesignedGrids-"+turb_model+"-"+Levelname1+"'",filename,WriteMode="append");
writelines("#  NOTE: the AUXDATA variables below should change for every zone (i.e., every grid level)", filename, WriteMode="append");
writelines("AUXDATA RelIterConvLevel = "+RelIterConvLevel1+"",filename,WriteMode="append");
writelines("AUXDATA GridLevel        = "+GridLevel1+"",filename,WriteMode="append");
writelines("AUXDATA GridCells        = "+GridCells1+"",filename,WriteMode="append");
writelines("#  NOTE: the AUXDATA variables below should be the same for every zone",filename,WriteMode="append");
writelines("AUXDATA ID              = "+AUXDATA_ID+"",filename,WriteMode="append");
writelines("AUXDATA Name            = "+name+"",filename,WriteMode="append");
writelines("AUXDATA SolverName      = "+solvername+"",filename,WriteMode="append");
writelines("AUXDATA ReynoldsNumber  = "+ReynoldsNumber+"",filename,WriteMode="append");
writelines("AUXDATA BasicAlgorithm  = "+BasicAlgorithm+"",filename,WriteMode="append");
writelines("AUXDATA TurbulenceModel = "+auxturb_model+"",filename,WriteMode="append");
writelines("AUXDATA FlowEqnOrder    = "+FlowEqnOrder+"",filename,WriteMode="append");
writelines("AUXDATA TurbEqnOrder    = "+TurbEqnOrder+"",filename,WriteMode="append");
writelines("AUXDATA Miscellaneous   = "+Miscellaneous+"",filename,WriteMode="append");
writelines("AUXDATA GridId          = "+GridId+"",filename,WriteMode="append");
if(var==1)
writelines("AUXDATA Profile         = "+profile+"",filename,WriteMode="append");
elseif(var==2)
writelines("AUXDATA Profile         = "+profile+"",filename,WriteMode="append");
elseif(var==3)
writelines("AUXDATA Profile         = "+profile+"",filename,WriteMode="append");
elseif(var==4)
writelines("AUXDATA Profile         = "+profile+"",filename,WriteMode="append");
else
writelines("",filename,WriteMode="append");
end



% -- Read and process the data file -------------------------------------
% Open the data file
fileID = fopen(Datafilefine, 'r');

% Read all lines from the file
dataLines = textscan(fileID, '%s', 'Delimiter', '\n');
fclose(fileID);

% Extract the lines (excluding the header)
lines = dataLines{1};
if length(lines) > 1
    % Remove the first line (header)
    lines(1) = [];
    
    % Process each line to remove commas and the first column
    processedLines = cell(size(lines));
    for i = 1:length(lines)
        % Remove commas from the line
        lineWithoutCommas = strrep(lines{i}, ',', ' ');
        
        % Split the line into columns
        columns = strsplit(lineWithoutCommas);
        
        % Remove the first column
        columns(1) = [];
        
        % Join remaining columns with spaces
        processedLine = strjoin(columns);
        
        % Add a leading space
        processedLines{i} = [' ' processedLine];
    end
    
    % Open the output file in append mode
    fileID = fopen(filename, 'a'); 
    
    % Write processed data to the output file
    for i = 1:length(processedLines)
        fprintf(fileID, '%s\n', processedLines{i});
    end
    fclose(fileID);
else
    % Handle case where there are no data lines (only header or empty file)
    warning('Data file %s is empty or does not contain enough lines.', Datafilefine);
end


%Medium Mesh
writelines("",filename,WriteMode="append");
writelines("ZONE T = '"+lastname+initial+"-2023-12_FinalAsDesignedGrids-"+turb_model+"-"+Levelname2+"'",filename,WriteMode="append");
writelines("#  NOTE: the AUXDATA variables below should change for every zone (i.e., every grid level)", filename, WriteMode="append");
writelines("AUXDATA RelIterConvLevel = "+RelIterConvLevel2+"",filename,WriteMode="append");
writelines("AUXDATA GridLevel        = "+GridLevel2+"",filename,WriteMode="append");
writelines("AUXDATA GridCells        = "+GridCells2+"",filename,WriteMode="append");
writelines("#  NOTE: the AUXDATA variables below should be the same for every zone",filename,WriteMode="append");
writelines("AUXDATA ID              = "+AUXDATA_ID+"",filename,WriteMode="append");
writelines("AUXDATA Name            = "+name+"",filename,WriteMode="append");
writelines("AUXDATA SolverName      = "+solvername+"",filename,WriteMode="append");
writelines("AUXDATA ReynoldsNumber  = "+ReynoldsNumber+"",filename,WriteMode="append");
writelines("AUXDATA BasicAlgorithm  = "+BasicAlgorithm+"",filename,WriteMode="append");
writelines("AUXDATA TurbulenceModel = "+auxturb_model+"",filename,WriteMode="append");
writelines("AUXDATA FlowEqnOrder    = "+FlowEqnOrder+"",filename,WriteMode="append");
writelines("AUXDATA TurbEqnOrder    = "+TurbEqnOrder+"",filename,WriteMode="append");
writelines("AUXDATA Miscellaneous   = "+Miscellaneous+"",filename,WriteMode="append");
writelines("AUXDATA GridId          = "+GridId+"",filename,WriteMode="append");
if(var==1)
writelines("AUXDATA Profile         = "+profile+"",filename,WriteMode="append");
elseif(var==2)
writelines("AUXDATA Profile         = "+profile+"",filename,WriteMode="append");
elseif(var==3)
writelines("AUXDATA Profile         = "+profile+"",filename,WriteMode="append");
elseif(var==4)
writelines("AUXDATA Profile         = "+profile+"",filename,WriteMode="append");
else
writelines("",filename,WriteMode="append");
end

% -- Read and process the data file Medium -------------------------------------
% Open the data file
fileID = fopen(Datafilemedium, 'r');

% Read all lines from the file
dataLines = textscan(fileID, '%s', 'Delimiter', '\n');
fclose(fileID);

% Extract the lines (excluding the header)
lines = dataLines{1};
if length(lines) > 1
    % Remove the first line (header)
    lines(1) = [];
    
    % Process each line to remove commas and the first column
    processedLines = cell(size(lines));
    for i = 1:length(lines)
        % Remove commas from the line
        lineWithoutCommas = strrep(lines{i}, ',', ' ');
        
        % Split the line into columns
        columns = strsplit(lineWithoutCommas);
        
        % Remove the first column
        columns(1) = [];
        
        % Join remaining columns with spaces
        processedLine = strjoin(columns);
        
        % Add a leading space
        processedLines{i} = [' ' processedLine];
    end
    
    % Open the output file in append mode
    fileID = fopen(filename, 'a'); 
    
    % Write processed data to the output file
    for i = 1:length(processedLines)
        fprintf(fileID, '%s\n', processedLines{i});
    end
    fclose(fileID);
else
    % Handle case where there are no data lines (only header or empty file)
    warning('Data file %s is empty or does not contain enough lines.', Datafilemedium);
end
%Coarse Mesh
writelines("",filename,WriteMode="append");
writelines("ZONE T = '"+lastname+initial+"-2023-12_FinalAsDesignedGrids-"+turb_model+"-"+Levelname3+"'",filename,WriteMode="append");
writelines("#  NOTE: the AUXDATA variables below should change for every zone (i.e., every grid level)", filename, WriteMode="append");
writelines("AUXDATA RelIterConvLevel = "+RelIterConvLevel3+"",filename,WriteMode="append");
writelines("AUXDATA GridLevel        = "+GridLevel3+"",filename,WriteMode="append");
writelines("AUXDATA GridCells        = "+GridCells3+"",filename,WriteMode="append");
writelines("#  NOTE: the AUXDATA variables below should be the same for every zone",filename,WriteMode="append");
writelines("AUXDATA ID              = "+AUXDATA_ID+"",filename,WriteMode="append");
writelines("AUXDATA Name            = "+name+"",filename,WriteMode="append");
writelines("AUXDATA SolverName      = "+solvername+"",filename,WriteMode="append");
writelines("AUXDATA ReynoldsNumber  = "+ReynoldsNumber+"",filename,WriteMode="append");
writelines("AUXDATA BasicAlgorithm  = "+BasicAlgorithm+"",filename,WriteMode="append");
writelines("AUXDATA TurbulenceModel = "+auxturb_model+"",filename,WriteMode="append");
writelines("AUXDATA FlowEqnOrder    = "+FlowEqnOrder+"",filename,WriteMode="append");
writelines("AUXDATA TurbEqnOrder    = "+TurbEqnOrder+"",filename,WriteMode="append");
writelines("AUXDATA Miscellaneous   = "+Miscellaneous+"",filename,WriteMode="append");
writelines("AUXDATA GridId          = "+GridId+"",filename,WriteMode="append");
if(var==1)
writelines("AUXDATA Profile         = "+profile+"",filename,WriteMode="append");
elseif(var==2)
writelines("AUXDATA Profile         = "+profile+"",filename,WriteMode="append");
elseif(var==3)
writelines("AUXDATA Profile         = "+profile+"",filename,WriteMode="append");
elseif(var==4)
writelines("AUXDATA Profile         = "+profile+"",filename,WriteMode="append");
else
writelines("",filename,WriteMode="append");
end

% -- Read and process the data file Coarse -------------------------------------
% Open the data file
fileID = fopen(Datafilecoarse, 'r');

% Read all lines from the file
dataLines = textscan(fileID, '%s', 'Delimiter', '\n');
fclose(fileID);

% Extract the lines (excluding the header)
lines = dataLines{1};
if length(lines) > 1
    % Remove the first line (header)
    lines(1) = [];
    
    % Process each line to remove commas and the first column
    processedLines = cell(size(lines));
    for i = 1:length(lines)
        % Remove commas from the line
        lineWithoutCommas = strrep(lines{i}, ',', ' ');
        
        % Split the line into columns
        columns = strsplit(lineWithoutCommas);
        
        % Remove the first column
        columns(1) = [];
        
        % Join remaining columns with spaces
        processedLine = strjoin(columns);
        
        % Add a leading space
        processedLines{i} = [' ' processedLine];
    end
    
    % Open the output file in append mode
    fileID = fopen(filename, 'a'); 
    
    % Write processed data to the output file
    for i = 1:length(processedLines)
        fprintf(fileID, '%s\n', processedLines{i});
    end
    fclose(fileID);
else
    % Handle case where there are no data lines (only header or empty file)
    warning('Data file %s is empty or does not contain enough lines.', Datafilecoarse);
end
